---
# # snapper autoadds /.snapshots
# umount /.snapshots
# rm -r /.snapshots
# snapper -c root create-config / # autogenerated subvol
# btrfs subvolume delete /.snapshots
# mkdir /.snapshots
# mount -a #remounts the original @snapshots
# btrfs subvol get-default / | awk '/ID/ {print $2}' # old / id
# btrfs subvol list / | awk '/path @$/ {print $2}'  # old @ id
# 256
# ###CREATE A LOCKFILE IF PROPERLY CONFIGURED


- name: Check if Snapper is configured
  ansible.builtin.shell: |
    if [ -f /etc/snapper/configs/root ] && grep -q 'SUBVOLUME="/"' /etc/snapper/configs/root; then
      echo true
    else
      echo false
    fi
  register: snapper_result
  changed_when: false
  become: true

- name: Set snapper_configured as boolean
  ansible.builtin.set_fact:
    snapper_configured: "{{ snapper_result.stdout | bool }}"

- name: Unmount /.snapshots
  ansible.builtin.shell: umount /.snapshots
  when: not snapper_configured
  become: true
  ignore_errors: true  # Continue if unmount fails (e.g., not mounted)
  changed_when: true

- name: Remove /.snapshots directory
  ansible.builtin.file:
    path: /.snapshots
    state: absent
  when: not snapper_configured
  become: true
  changed_when: true

- name: Create Snapper configuration for root
  ansible.builtin.shell: snapper -c root create-config /
  when: not snapper_configured
  become: true
  changed_when: true

- name: Delete /.snapshots Btrfs subvolume
  ansible.builtin.shell: btrfs subvolume delete /.snapshots
  when: not snapper_configured
  become: true
  ignore_errors: true  # Continue if subvolume doesn't exist
  changed_when: true

- name: Create /.snapshots directory
  ansible.builtin.file:
    path: /.snapshots
    state: directory
    mode: '0755'
  when: not snapper_configured
  become: true
  changed_when: true

- name: Mount all filesystems
  ansible.builtin.shell: mount -a
  when: not snapper_configured
  become: true
  changed_when: true

- name: Get default Btrfs subvolume ID
  ansible.builtin.shell: btrfs subvol get-default / | awk '/ID/ {print $2}'
  register: default_id_result
  changed_when: false
  become: true

- name: Get ID of subvolume with path @
  ansible.builtin.shell: btrfs subvol list / | awk '/path @$/ {print $2}'
  register: at_id_result
  changed_when: false
  become: true

- name: Set ID facts as integers
  ansible.builtin.set_fact:
    default_id: "{{ default_id_result.stdout | int }}"
    at_id: "{{ at_id_result.stdout | int }}"
    id_comparison: "{{ (default_id_result.stdout | int) == (at_id_result.stdout | int) }}"

- name: Set default Btrfs subvolume to @ if IDs differ
  ansible.builtin.shell: btrfs subvolume set-default {{ at_id }} /
  when: not id_comparison
  become: true
  changed_when: true

- name: Configure Snapper settings in /etc/snapper/configs/root
  ansible.builtin.lineinfile:
    path: /etc/snapper/configs/root
    regexp: '^{{ item.key }}='
    line: '{{ item.key }}="{{ item.value }}"'
    state: present
  loop:
    - { key: SPACE_LIMIT, value: "0.1" }
    - { key: FREE_LIMIT, value: "0.5" }
    - { key: ALLOW_USERS, value: "{{ ansible_user }}" }
    - { key: ALLOW_GROUPS, value: "sudo" }
    - { key: TIMELINE_MIN_AGE, value: "1800" }
    - { key: TIMELINE_LIMIT_HOURLY, value: "2" }
    - { key: TIMELINE_LIMIT_DAILY, value: "3" }
    - { key: TIMELINE_LIMIT_WEEKLY, value: "0" }
    - { key: TIMELINE_LIMIT_MONTHLY, value: "3" }
    - { key: TIMELINE_LIMIT_YEARLY, value: "2" }
    - { key: SYNC_ACL=, value: "yes" }
  become: true

- name: Enable and start snapper-timeline.timer
  ansible.builtin.systemd:
    name: snapper-timeline.timer
    state: started
    enabled: true
  become: true

- name: Enable and start snapper-cleanup.timer
  ansible.builtin.systemd:
    name: snapper-cleanup.timer
    state: started
    enabled: true
  become: true

- name: Check if /.snapshots exists and its group
  ansible.builtin.stat:
    path: /.snapshots
  register: snapshots_stat
  become: true

- name: Set group ownership of /.snapshots to sudo
  ansible.builtin.file:
    path: /.snapshots
    group: sudo
    recurse: true
    state: directory
  when:
    - snapshots_stat.stat.exists
    - snapshots_stat.stat.gr_name != 'sudo'
  become: true
  ignore_errors: true

...